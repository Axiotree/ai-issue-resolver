name: Release on Version Change

on:
  push:
    branches:
      - main
      
permissions:
  contents: write

jobs:
  release_on_version_change:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          # Ensure we fetch the full commit history so HEAD^ exists
          fetch-depth: 0

      - name: Compare version
        id: compare_version
        run: |
          # Get the latest tag from GitHub
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)

          # Read the new version field from package.json
          NEW_VERSION=$(jq -r '.version' package.json)

          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

          if [ "v$NEW_VERSION" != "$LATEST_TAG" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: generate_notes
        if: steps.compare_version.outputs.version_changed == 'true'
        run: |
          OLD_VERSION=${{ steps.compare_version.outputs.OLD_VERSION }}
          NEW_VERSION=${{ steps.compare_version.outputs.NEW_VERSION }}

          # If OLD_VERSION is null or empty, we just grab the latest commit message
          if [ -z "$OLD_VERSION" ] || [ "$OLD_VERSION" = "null" ]; then
            NOTES=$(git log -1 --pretty=format:"- %s" --no-merges)
          else
            # You can refine how you calculate the range here
            # For simplicity, we log from OLD_VERSION..HEAD if there's a tag named v<OLD_VERSION>
            if git rev-parse "v$OLD_VERSION" >/dev/null 2>&1; then
              RANGE="v$OLD_VERSION..HEAD"
            else
              RANGE="HEAD^..HEAD"
            fi
            NOTES=$(git log $RANGE --pretty=format:"- %s" --no-merges)
          fi

          # Output the notes to be used by the next step
          echo 'notes<<RELEASE_NOTES' >> $GITHUB_OUTPUT
          echo 'message<<EOF' >> $GITHUB_OUTPUT
          echo '# Axiotree AI Issue Resolver' >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo 'We are excited to announce the v$NEW_VERSION release of Axiotree AI Issue Resolver, a GitHub Action plugin that integrates AI-powered code generation and review processes into your GitHub workflow using Langchain.' >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo '## Key Features' >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo '* Automated PR Generation: Generate PRs automatically from issues tagged with ai-issue-resolver-pr.' >> $GITHUB_OUTPUT
          echo '* Advanced Code Review: Comprehensive code quality analysis, performance optimization suggestions, and security vulnerability scanning.' >> $GITHUB_OUTPUT
          echo '* Interactive PR Updates: Update PRs using slash commands and request specific changes with natural language.' >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo '## Installation' >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo '* Visit the GitHub Marketplace.' >> $GITHUB_OUTPUT
          echo '* Add the action to your repository workflow.' >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo '## Usage' >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo '* Label issues with ai-issue-resolver-pr to generate PRs.' >> $GITHUB_OUTPUT
          echo '* Use /ai-issue-resolver-review for code reviews.' >> $GITHUB_OUTPUT
          echo '* Use /ai-issue-resolver-change to request specific changes.' >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo '## Support' >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo 'For support, check the documentation, open an issue, or email support@axiotree.com.' >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo 'RELEASE_NOTES' >> $GITHUB_OUTPUT
          
     

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20 # Or your project's Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run TypeScript project
        run: node build.js

      - name: Set up Git remote
        if: steps.compare_version.outputs.version_changed == 'true'
        run: |
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} 

      - name: Push tag
        if: steps.compare_version.outputs.version_changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            NEW_VERSION=${{ steps.compare_version.outputs.NEW_VERSION }}
            git config --global user.email "github-actions@github.com"
            git config --global user.name "GitHub Actions"
            sed -i '/dist/d' .gitignore
            git add dist/
            git commit -m "Release v$NEW_VERSION"
            git tag "v$NEW_VERSION"
            git push origin "v$NEW_VERSION"

      - name: Create GitHub Release
        if: steps.compare_version.outputs.version_changed == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.compare_version.outputs.NEW_VERSION }}
          release_name: Release v${{ steps.compare_version.outputs.NEW_VERSION }}
          body: ${{ steps.generate_notes.outputs.notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
